/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import bus.FunctionRoleAction;
import bus.FunctionAction;
import bus.RoleAction;
import dto.FunctionRoles;
import dto.Functions;
import dto.Roles;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author phong
 */
public class FunctionRoleIFrm extends javax.swing.JInternalFrame {

    /**
     * Creates new form FunctionRoleIFrm
     */
    FunctionRoleAction fr;
    FunctionAction functions;
    RoleAction roles;

    public FunctionRoleIFrm() {
        initComponents();

        fr = new FunctionRoleAction();
        functions = new FunctionAction();
        roles = new RoleAction();
        loadTable(fr.readAll());
        loadList(functions.readAll());
        loadCombobox(roles.readAll());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spnFunctionRole = new javax.swing.JScrollPane();
        tblFunctionRole = new javax.swing.JTable();
        spnFunction = new javax.swing.JScrollPane();
        tblFunction = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbRole = new javax.swing.JComboBox<>();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setClosable(true);
        setTitle("Function Roles");

        tblFunctionRole.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFunctionRole.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFunctionRoleMouseClicked(evt);
            }
        });
        spnFunctionRole.setViewportView(tblFunctionRole);

        tblFunction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnFunction.setViewportView(tblFunction);

        jLabel1.setText("Role");

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icon/hospital-symbol.png"))); // NOI18N
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icon/tick-mark.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spnFunctionRole, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(spnFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCreate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnUpdate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 87, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(spnFunctionRole, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(spnFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        List<Integer> listFunctionCreate = new ArrayList<>();
        int size = tblFunction.getModel().getRowCount();
        for (int i = 0; i < size; i++) {
            if ((Boolean) tblFunction.getValueAt(i, 0)) {
                listFunctionCreate.add(functions.readByNameFunction((String) tblFunction.getValueAt(i, 1)).getId());
            }
        }
        int roleid = roles.readByName((String) cmbRole.getSelectedItem()).getId();
        if (listFunctionCreate.size() != 0) {
            if (fr.readByRole(roleid).getFunctions().size() == 0) {
                if (fr.create(new FunctionRoles(roleid, listFunctionCreate)) != null) {
                    JOptionPane.showMessageDialog(this, "Success");
                    loadTable(fr.readAll());
                    loadList(functions.readAll());
                    loadCombobox(roles.readAll());
                } else {
                    JOptionPane.showMessageDialog(this, "Fail");
                }
            }else {
                JOptionPane.showMessageDialog(this, "Role existed");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select at least one function");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if (tblFunctionRole.getSelectedRow() != -1) {
            int roleid = roles.readByName((String) cmbRole.getSelectedItem()).getId();
            List<Integer> listFunction = fr.readByRole(roleid).getFunctions();
            int listfunctionsize = listFunction.size();
            List<Integer> listFunctionCreate = new ArrayList<>();
            int listCreatesize = tblFunction.getModel().getRowCount();

            for (int i = 0; i < listCreatesize; i++) {
                if ((Boolean) tblFunction.getValueAt(i, 0)) {
                    listFunctionCreate.add(functions.readByNameFunction((String) tblFunction.getValueAt(i, 1)).getId());
                }
            }

            boolean flag = false;
            List<Integer> create = new ArrayList<>();
            for (Integer i : listFunctionCreate) {
                if (!listFunction.contains(i)) {
                    create.add(i);
                }
            }

            if (fr.create(new FunctionRoles(roleid, create)) != null) {
                flag = true;
            };

            for (Integer i : listFunction) {
                if (!listFunctionCreate.contains(i)) {
                    fr.delete(roleid, i);
                    flag = true;
                }
            }

            if (flag) {
                JOptionPane.showMessageDialog(this, "Success");
                loadTable(fr.readAll());
                loadList(functions.readAll());
                loadCombobox(roles.readAll());
            } else {
                JOptionPane.showMessageDialog(this, "Fail");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select role to update");
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tblFunctionRoleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFunctionRoleMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        loadList(functions.readAll());
        int row = tblFunctionRole.getSelectedRow();
        String rolename = (String) tblFunctionRole.getValueAt(row, 0);
        int roleid = roles.readByName(rolename).getId();
        List<Integer> functionlist = fr.readByRole(roleid).getFunctions();
        DefaultTableModel tm = (DefaultTableModel) tblFunction.getModel();
        int size = tblFunction.getModel().getRowCount();
        for (int i = 0; i < size; i++) {
            if (functionlist.contains(functions.readByNameFunction((String) tblFunction.getValueAt(i, 1)).getId())) {
                tm.setValueAt(true, i, 0);
            }
        }
        tblFunction.setModel(tm);
        cmbRole.setSelectedItem(rolename);
    }//GEN-LAST:event_tblFunctionRoleMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane spnFunction;
    private javax.swing.JScrollPane spnFunctionRole;
    private javax.swing.JTable tblFunction;
    private javax.swing.JTable tblFunctionRole;
    // End of variables declaration//GEN-END:variables

    private void loadTable(List<FunctionRoles> readAll) {
        Vector cols = new Vector();
        cols.add("Role");
        cols.add("Function");
        Vector rows = new Vector();
        for (FunctionRoles f : readAll) {
            for (Integer i : f.getFunctions()) {
                Vector row = new Vector();
                row.add(roles.readById(f.getRole()).getName());
                row.add(functions.readById(i).getName());
                rows.add(row);
            }
        }

        tblFunctionRole.setModel(new DefaultTableModel(rows, cols));
        tblFunctionRole.updateUI();
        spnFunctionRole.setViewportView(this.tblFunctionRole);
    }

    private void loadList(List<Functions> readAll) {
        Vector cols = new Vector();
        cols.add("Select");
        cols.add("Function");

        Vector rows = new Vector();
        for (Functions f : readAll) {
            Vector row = new Vector();
            row.add(false);
            row.add(f.getName());
            rows.add(row);
        }

        tblFunction.setModel(new DefaultTableModel(rows, cols) {
            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return Boolean.class;
                    default:
                        return String.class;
                }
            }
        });
        tblFunction.getColumn("Select").setPreferredWidth(5);
        tblFunction.updateUI();
        spnFunction.setViewportView(this.tblFunction);

    }

    private void loadCombobox(List<Roles> readAll) {
        Vector items = new Vector();
        for (Roles r : readAll) {
            items.add(r.getName());
        }
        cmbRole.setModel(new DefaultComboBoxModel(items));
        cmbRole.updateUI();
    }
}
